<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">

    <xacro:include filename="inertial_macros.xacro"/>

    <material name="black">
        <color rgba="0 0 0 1"/>
    </material>

    <material name="white">
        <color rgba="1 1 1 1"/>
    </material>

    <material name="orange">
        <color rgba="0.5 0.5 0 1"/>
    </material>

    <material name="blue">
        <color rgba="0 0 1 1"/>
    </material>

    <material name="green">
        <color rgba="0 1 0 1"/>
    </material>


    <link name="base_link"></link>
    <joint name="chassis_joint" type="fixed"> <!-- joint定义的xyz值描述的是如何从父link的坐标系移动到子link的坐标系，xyz值表示子link的原点相对于父link原点的位置 -->
        <parent link="base_link"/>
        <child link="chassis_link"/>
        <origin xyz="-0.1 0 0"/> <!-- 在base_link坐标系下定义关节中心点的xyz坐标位置，方便底盘、轮子的中心点与这个关节连接-->
    </joint>

    <link name="chassis_link">
        <visual>
            <geometry>
                <box size="0.3 0.3 0.15"/> <!-- 长宽高 -->
            </geometry>
            <material name="white"/>
            <origin xyz="0.1 0 0.075"/>
        </visual>
        <collision> <!-- collision标签用于描述碰撞检测的形状，通常和visual标签中的形状一致，但是collision标签中的形状不会被渲染,通常应该保留 origin 标签 -->
            <geometry>
                <box size="0.3 0.3 0.15"/>
            </geometry>
            <origin xyz="0.1 0 0.075"/>
        </collision>
        <xacro:inertial_box mass="0.5" x="0.3" y="0.3" z="0.15"> <!-- 引用惯性标签-->
            <origin xyz="0.1 0 0.075"/>
        </xacro:inertial_box>
    </link>

    <gazebo reference="chassis_link">
        <material>Gazebo/White</material>
    </gazebo>

    <joint name="left_wheel_joint" type="continuous"> <!-- chassis和wheel都以base_link为父坐标，当然wheel也可以以chassis为父连接，选择base_link减少了层级结构，使URDF或类似文件更加简洁 -->
        <parent link="base_link"/>
        <child link="left_wheel_link"/>
        <origin xyz="-0.1 0.175 0"  rpy="-${pi/2} 0 0"/>   <!-- 需要旋转坐标调整位姿的情况，也可以用link origin来替换，添加axis只能在joint内, 旋转方向不可以相反，joint_state控制轮子运动的方向相反 -->
        <axis xyz="0 0 1"/> <!-- 旋转轴，仅存在于joint标签内 -->
    </joint>

    <link name="left_wheel_link">
        <visual>
            <geometry>
                <cylinder radius="0.05" length="0.05"/>  <!-- 半径 高度 -->
            </geometry>
            <material name="black"/>
        </visual>
        <collision>
            <geometry>
                <cylinder radius="0.05" length="0.05"/>  <!-- 半径 高度 -->
            </geometry>
            <material name="black"/>
        </collision>
        <xacro:inertial_cylinder mass="0.1" radius="0.05" length="0.05">
            <origin xyz="0 0 0" rpy="0 0 0"/>
        </xacro:inertial_cylinder>
    </link>

    <gazebo reference="left_wheel_link">
        <material>Gazebo/Blue</material>
    </gazebo>

    <joint name="right_wheel_joint" type="continuous">
        <parent link="base_link"/>
        <child link="right_wheel_link"/>
        <origin xyz="-0.1 -0.175 0"  rpy="-${pi/2} 0 0"/>   <!-- 需要和left wheel旋转方向相反吗？哪怕结果一样也必须按照相反的方向旋转？ -->
        <axis xyz="0 0 1"/>
    </joint>

    <link name="right_wheel_link">
        <visual>
            <geometry>
                <cylinder radius="0.05" length="0.05"/>
            </geometry>
            <material name="black"/>
        </visual>
        <collision>
            <geometry>
                <cylinder radius="0.05" length="0.05"/>
            </geometry>
            <material name="black"/>
        </collision>
        <xacro:inertial_cylinder mass="0.1" radius="0.05" length="0.05">
            <origin xyz="0 0 0" rpy="0 0 0"/>
        </xacro:inertial_cylinder>
    </link>  <!-- 在rivz2种，这个机器人底座紧贴着grid上，轮子都嵌入进grid了，是不影响这个移动小车的功能使用吗？完全可以调节grid的高度？还是说是有问题的？-->

    <gazebo reference="right_wheel_link">
        <material>Gazebo/Blue</material>
    </gazebo>

    <joint name="caster_wheel_joint" type="fixed">
        <parent link="base_link"/>
        <child link="caster_wheel_link"/>
        <origin xyz="0.1 0 0"/>
    </joint>

    <link name="caster_wheel_link">
        <visual>
            <geometry>
                <sphere radius="0.05"/>
            </geometry>
            <material name="black"/>
        </visual>
        <collision>
            <geometry>
                <sphere radius="0.05"/>
            </geometry>
            <material name="black"/>
        </collision>
        <xacro:inertial_sphere mass="0.1" radius="0.05">
            <origin xyz="0 0 0" rpy="0 0 0"/>
        </xacro:inertial_sphere>
    </link>


    <gazebo reference="caster_wheel_link">
        <material>Gazebo/Black</material>
        <mu1 value="0.001"/>
        <mu2 value="0.001"/>
    </gazebo>
</robot>